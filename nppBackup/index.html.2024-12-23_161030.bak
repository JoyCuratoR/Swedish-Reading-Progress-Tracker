<!DOCTYPE html>
<html lang="en">
<!-- Previous head section and styles remain the same -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Reading Progress Tracker</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <!-- Previous styles remain the same -->
    <style>
        /* Previous styles remain the same */
    </style>
</head>
<body>
    <div class="card">
        <h1>Swedish Reading Progress Tracker</h1>
        
        <div class="input-section">
            <div class="input-group">
                <label for="comprehension">Comprehension Rate (%)</label>
                <input type="number" id="comprehension" placeholder="Comprehension percentage">
            </div>
            <div class="input-group">
                <label for="wpm">Reading Speed (WPM)</label>
                <input type="number" id="wpm" placeholder="Words per minute">
            </div>
            <div class="input-group">
                <label for="complexity">Text Complexity (1-10)</label>
                <input type="number" id="complexity" step="0.1" placeholder="Complexity level">
            </div>
            <div class="input-group">
                <label for="date">Date</label>
                <input type="date" id="date">
            </div>
        </div>
        
        <div class="button-group">
            <button class="btn-primary" onclick="addDataPoint()">Add Data Point</button>
            <button class="btn-secondary" onclick="exportData()">Export Data (CSV)</button>
            <button class="btn-secondary" onclick="importData()">Import Data</button>
            <input type="file" id="fileInput" style="display: none" accept=".csv" onchange="handleFileSelect(event)">
        </div>

        <div class="tabs">
            <button class="tab active" onclick="switchTab('overall')">Overall Progress</button>
            <button class="tab" onclick="switchTab('metrics')">Detailed Metrics</button>
        </div>

        <div class="chart-container">
            <canvas id="progressChart"></canvas>
        </div>

        <div class="data-table-container">
            <h3>Data Points</h3>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Comprehension</th>
                        <th>Reading Speed</th>
                        <th>Complexity</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="dataTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Initialize empty progress data
        let progressData = {
            dates: [],
            comprehension: [],
            wpm: [],
            complexity: []
        };

        let currentChart = null;
        let currentView = 'overall';
        let editingIndex = -1;

        // Set today's date as default
        window.onload = function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
            initChart();
        };

        function initChart() {
            const ctx = document.getElementById('progressChart');
            if (currentChart) {
                currentChart.destroy();
            }
            
            currentChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Comprehension Rate (%)',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            updateChart();
        }

        function addDataPoint() {
            const date = document.getElementById('date').value;
            const comprehension = parseFloat(document.getElementById('comprehension').value);
            const wpm = parseInt(document.getElementById('wpm').value);
            const complexity = parseFloat(document.getElementById('complexity').value);

            if (!date || isNaN(comprehension) || isNaN(wpm) || isNaN(complexity)) {
                alert('Please fill in all fields with valid numbers');
                return;
            }

            if (editingIndex >= 0) {
                progressData.dates[editingIndex] = date;
                progressData.comprehension[editingIndex] = comprehension;
                progressData.wpm[editingIndex] = wpm;
                progressData.complexity[editingIndex] = complexity;
                editingIndex = -1;
                document.querySelector('.btn-primary').textContent = 'Add Data Point';
            } else {
                // Add new data point
                progressData.dates.push(date);
                progressData.comprehension.push(comprehension);
                progressData.wpm.push(wpm);
                progressData.complexity.push(complexity);
            }

            // Sort data by date
            const indices = progressData.dates
                .map((date, index) => ({ date, index }))
                .sort((a, b) => new Date(a.date) - new Date(b.date))
                .map(item => item.index);

            // Reorder all arrays based on sorted dates
            progressData.dates = indices.map(i => progressData.dates[i]);
            progressData.comprehension = indices.map(i => progressData.comprehension[i]);
            progressData.wpm = indices.map(i => progressData.wpm[i]);
            progressData.complexity = indices.map(i => progressData.complexity[i]);

            updateChart();
            updateDataTable();
            clearInputs();
        }

        function updateChart() {
            if (!currentChart) return;

            currentChart.data.labels = progressData.dates;
            
            if (currentView === 'overall') {
                currentChart.data.datasets = [{
                    label: 'Comprehension Rate (%)',
                    data: progressData.comprehension,
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }];
            } else {
                currentChart.data.datasets = [
                    {
                        label: 'Comprehension Rate (%)',
                        data: progressData.comprehension,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    },
                    {
                        label: 'Reading Speed (WPM)',
                        data: progressData.wpm,
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1
                    },
                    {
                        label: 'Text Complexity',
                        data: progressData.complexity,
                        borderColor: 'rgb(255, 205, 86)',
                        tension: 0.1
                    }
                ];
            }
            
            currentChart.update();
        }

        function updateDataTable() {
            const tbody = document.getElementById('dataTableBody');
            tbody.innerHTML = '';
            
            for (let i = 0; i < progressData.dates.length; i++) {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${progressData.dates[i]}</td>
                    <td>${progressData.comprehension[i]}%</td>
                    <td>${progressData.wpm[i]}</td>
                    <td>${progressData.complexity[i]}</td>
                    <td>
                        <button class="btn-edit" onclick="editDataPoint(${i})">Edit</button>
                        <button class="btn-danger" onclick="deleteDataPoint(${i})">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            }
        }

        function clearInputs() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
            document.getElementById('comprehension').value = '';
            document.getElementById('wpm').value = '';
            document.getElementById('complexity').value = '';
        }

        function switchTab(tab) {
            currentView = tab;
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            event.target.classList.add('active');
            updateChart();
        }

        function editDataPoint(index) {
            editingIndex = index;
            document.getElementById('date').value = progressData.dates[index];
            document.getElementById('comprehension').value = progressData.comprehension[index];
            document.getElementById('wpm').value = progressData.wpm[index];
            document.getElementById('complexity').value = progressData.complexity[index];
            document.querySelector('.btn-primary').textContent = 'Update Data Point';
        }

        function deleteDataPoint(index) {
            if (confirm('Are you sure you want to delete this data point?')) {
                progressData.dates.splice(index, 1);
                progressData.comprehension.splice(index, 1);
                progressData.wpm.splice(index, 1);
                progressData.complexity.splice(index, 1);
                updateChart();
                updateDataTable();
            }
        }

        function exportData() {
            let csv = 'Date,Comprehension,WPM,Complexity\n';
            for (let i = 0; i < progressData.dates.length; i++) {
                csv += `${progressData.dates[i]},${progressData.comprehension[i]},${progressData.wpm[i]},${progressData.complexity[i]}\n`;
            }
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'swedish_reading_progress.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function importData() {
            document.getElementById('fileInput').click();
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const text = e.target.result;
                const lines = text.split('\n');
                
                // Clear existing data
                progressData = {
                    dates: [],
                    comprehension: [],
                    wpm: [],
                    complexity: []
                };
                
                // Skip header row
                for (let i = 1; i < lines.length; i++) {
                    if (lines[i].trim() === '') continue;
                    
                    const [date, comprehension, wpm, complexity] = lines[i].split(',');
                    progressData.dates.push(date);
                    progressData.comprehension.push(parseFloat(comprehension));
                    progressData.wpm.push(parseInt(wpm));
                    progressData.complexity.push(parseFloat(complexity));
                }
                
                updateChart();
                updateDataTable();
            };
            
            reader.readAsText(file);
        }
    </script>
</body>
</html>
