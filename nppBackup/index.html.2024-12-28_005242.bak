<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Reading Progress Tracker</title>
    <!-- Modern CSS framework -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <!-- Chart.js for better visualizations -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
        }
        /* Hide password by default */
        #githubToken {
            -webkit-text-security: disc;
            text-security: disc;
        }
        /* Show on focus if needed */
        #githubToken:focus {
            -webkit-text-security: none;
            text-security: none;
        }
		.modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
        }
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen p-6">
    </style>
</head>
<body class="bg-gray-50 min-h-screen p-6">
    <div class="max-w-7xl mx-auto space-y-6">
        <!-- Main Card -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-2xl font-bold mb-6">Swedish Reading Progress Tracker</h1>

            <!-- GitHub Integration -->
            <div class="bg-blue-50 rounded-lg p-4 mb-6">
                <h2 class="text-lg font-semibold mb-2">GitHub Integration</h2>
                <div class="space-y-2">
                    <input type="password" id="githubToken" placeholder="GitHub Personal Access Token" 
                           class="w-full p-2 border rounded">
                    <input type="text" id="githubRepo" placeholder="username/repository" 
                           class="w-full p-2 border rounded">
                    <button onclick="saveGithubSettings()" 
                            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                        Connect GitHub
                    </button>
                </div>
                <div id="githubStatus" class="mt-2 text-sm"></div>
            </div>

            <!-- Session Input Form -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <!-- Reading Session section modification -->
    <div class="bg-gray-50 rounded-lg p-4">
        <h3 class="font-semibold mb-4">Reading Session</h3>
        <div class="space-y-3">
            <div>
                <label class="block text-sm mb-1">Date</label>
                <input type="datetime-local" id="sessionDate" 
                       class="w-full p-2 border rounded">
            </div>
            <div>
                <label class="block text-sm mb-1">Reading Duration (minutes)</label>
                <input type="number" id="readingTime" min="1" required 
                       class="w-full p-2 border rounded">
            </div>
            <div>
                <label class="block text-sm mb-1">Words Read</label>
                <input type="number" id="wordsRead" min="1"
                       class="w-full p-2 border rounded">
            </div>
            <div>
                <label class="block text-sm mb-1">Text Type</label>
                <select id="textType" class="w-full p-2 border rounded">
                                <option value="news">News Article</option>
                                <option value="story">Short Story</option>
                                <option value="book">Book Chapter</option>
                                <option value="social">Social Media</option>
                                <option value="website">Website Content</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>
                </div>
				
				<!-- Add Data Management section -->
    <div class="mt-6 bg-white rounded-lg shadow p-4">
        <h3 class="font-semibold mb-4">Session History</h3>
        <div class="overflow-x-auto">
            <table class="min-w-full table-auto">
                <thead>
                    <tr class="bg-gray-50">
                        <th class="px-4 py-2">Date</th>
                        <th class="px-4 py-2">Time (min)</th>
                        <th class="px-4 py-2">Words Read</th>
                        <th class="px-4 py-2">Reading Speed (wpm)</th>
                        <th class="px-4 py-2">Daily Improvement</th>
                        <th class="px-4 py-2">Actions</th>
						<th class="px-4 py-2">Adjusted Speed</th>
						<th class="px-4 py-2">Metrics</th>
                    </tr>
                </thead>
                <tbody id="historyTableBody">
                    <!-- Populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
				<!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <h3 class="font-semibold mb-4">Edit Session</h3>
            <input type="hidden" id="editIndex">
            <div class="space-y-3">
                <div>
                    <label class="block text-sm mb-1">Date</label>
                    <input type="datetime-local" id="editDate" class="w-full p-2 border rounded">
                </div>
                <div>
                    <label class="block text-sm mb-1">Reading Duration (minutes)</label>
                    <input type="number" id="editTime" class="w-full p-2 border rounded">
                </div>
                <div>
                    <label class="block text-sm mb-1">Words Read</label>
                    <input type="number" id="editWords" class="w-full p-2 border rounded">
                </div>
                <!-- Add other fields as needed -->
                <div class="flex justify-end gap-2">
                    <button onclick="closeEditModal()" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                    <button onclick="saveEdit()" class="bg-blue-500 text-white px-4 py-2 rounded">Save</button>
                </div>
            </div>
        </div>
    </div>
	
                <!-- Vocabulary Tracking -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="font-semibold mb-4">Vocabulary Tracking</h3>
                    <div class="space-y-3">
                        <div>
                            <label class="block text-sm mb-1">New Words Learned</label>
                            <input type="number" id="newWords" min="0" 
                                   class="w-full p-2 border rounded">
                        </div>
                        <div>
                            <label class="block text-sm mb-1">Dictionary Lookups</label>
                            <input type="number" id="lookups" min="0" 
                                   class="w-full p-2 border rounded">
                        </div>
                    </div>
                </div>

                <!-- Session Notes -->
                <div class="bg-gray-50 rounded-lg p-4">
                    <h3 class="font-semibold mb-4">Session Notes</h3>
                    <div>
                        <label class="block text-sm mb-1">Notes & Observations</label>
                        <textarea id="notes" rows="4" 
                                 class="w-full p-2 border rounded"
                                 placeholder="What was challenging? What felt easier?"></textarea>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-4 mb-6">
                <button onclick="saveProgress()" 
                        class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                    Save Session
                </button>
                <button onclick="exportData()" 
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Export Data
                </button>
                <input type="file" id="importFile" class="hidden" onchange="importData(this.files[0])">
                <button onclick="document.getElementById('importFile').click()" 
                        class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Import Data
                </button>
            </div>

            <!-- Status Messages -->
            <div id="statusMessage" class="mb-6 hidden"></div>

            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-blue-50 rounded-lg p-4 text-center">
                    <h3 class="text-lg font-semibold mb-2" id="weeklyTime">0</h3>
                    <p class="text-sm text-gray-600">Minutes this week</p>
                </div>
                <div class="bg-green-50 rounded-lg p-4 text-center">
                    <h3 class="text-lg font-semibold mb-2" id="totalWords">0</h3>
                    <p class="text-sm text-gray-600">Total new words</p>
                </div>
                <div class="bg-purple-50 rounded-lg p-4 text-center">
                    <h3 class="text-lg font-semibold mb-2" id="avgTime">0</h3>
                    <p class="text-sm text-gray-600">Avg. minutes per session</p>
                </div>
                <div class="bg-yellow-50 rounded-lg p-4 text-center">
                    <h3 class="text-lg font-semibold mb-2" id="totalSessions">0</h3>
                    <p class="text-sm text-gray-600">Total sessions</p>
                </div>
            </div>
			
			<div>
				<label class="block text-sm mb-1">Comprehension Score (0-100)</label>
				<input type="number" id="comprehensionScore" min="0" max="100" 
				class="w-full p-2 border rounded">
			</div>

            <!-- Progress Chart -->
            <div class="chart-container">
                <canvas id="progressChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        // Initialize data and chart
        let progressData = JSON.parse(localStorage.getItem('readingProgress')) || [];
        let chart = null;

        // Initialize chart
        function initChart() {
            const ctx = document.getElementById('progressChart').getContext('2d');
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Reading Time (minutes)',
                        data: [],
                        borderColor: 'rgb(59, 130, 246)',
                        tension: 0.1
                    }, {
                        label: 'New Words',
                        data: [],
                        borderColor: 'rgb(16, 185, 129)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            updateChart();
        }


        // Update chart
        function updateChart() {
            if (!chart) return;

            const dates = progressData.map(entry => new Date(entry.date).toLocaleDateString());
            const readingTimes = progressData.map(entry => entry.readingTime);
            const newWords = progressData.map(entry => entry.newWords);

            chart.data.labels = dates;
            chart.data.datasets[0].data = readingTimes;
            chart.data.datasets[1].data = newWords;
            chart.update();
        }

        // Update statistics
        function updateStats() {
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

            const weeklyTime = progressData
                .filter(entry => new Date(entry.date) > oneWeekAgo)
                .reduce((sum, entry) => sum + entry.readingTime, 0);

            const totalWords = progressData.reduce((sum, entry) => sum + entry.newWords, 0);
            const avgTime = progressData.length > 0 
                ? Math.round(progressData.reduce((sum, entry) => sum + entry.readingTime, 0) / progressData.length)
                : 0;

            document.getElementById('weeklyTime').textContent = weeklyTime;
            document.getElementById('totalWords').textContent = totalWords;
            document.getElementById('avgTime').textContent = avgTime;
            document.getElementById('totalSessions').textContent = progressData.length;
        }

        // Show status message
        function showStatus(message, type) {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.textContent = message;
            statusDiv.className = `mb-6 p-4 rounded ${type === 'error' ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`;
            statusDiv.classList.remove('hidden');
            setTimeout(() => statusDiv.classList.add('hidden'), 3000);
        }

        // Clear form
        function clearForm() {
            document.getElementById('readingTime').value = '';
            document.getElementById('newWords').value = '';
            document.getElementById('lookups').value = '';
            document.getElementById('notes').value = '';
        }

        // GitHub integration
        async function saveToGithub(data) {
            const token = localStorage.getItem('githubToken');
            const repo = localStorage.getItem('githubRepo');
            if (!token || !repo) return;

            try {
                const response = await fetch(`https://api.github.com/repos/${repo}/contents/reading-progress.json`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${token}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: 'Update reading progress',
                        content: btoa(JSON.stringify(data)),
                        sha: localStorage.getItem('githubSha')
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    localStorage.setItem('githubSha', result.content.sha);
                    showStatus('Saved to GitHub!', 'success');
                } else {
                    throw new Error('Failed to save to GitHub');
                }
            } catch (error) {
                showStatus('Failed to save to GitHub', 'error');
            }
        }

        // Save GitHub settings
        function saveGithubSettings() {
            const token = document.getElementById('githubToken').value;
            const repo = document.getElementById('githubRepo').value;
            
            if (!token || !repo) {
                showStatus('Please enter both token and repository', 'error');
                return;
            }

            localStorage.setItem('githubToken', token);
            localStorage.setItem('githubRepo', repo);
            showStatus('GitHub settings saved!', 'success');
        }

        // Export/Import functions
        function exportData() {
            const dataStr = JSON.stringify(progressData, null, 2);
            const blob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'swedish-reading-progress.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function importData(file) {
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    progressData = importedData;
                    localStorage.setItem('readingProgress', JSON.stringify(progressData));
                    updateChart();
                    updateStats();
                    showStatus('Data imported successfully!', 'success');
                } catch (error) {
                    showStatus('Error importing data', 'error');
                }
            };
            reader.readAsText(file);
        }

        // Initialize on load
        window.onload = function() {
            initChart();
            updateStats();
            updateHistoryTable();
            // Set default date to now
            document.getElementById('sessionDate').value = new Date().toISOString().slice(0, 16);
        };
		
		 // Modify saveProgress function to include words read and date
        function saveProgress() {
            const readingTime = parseInt(document.getElementById('readingTime').value);
            const wordsRead = parseInt(document.getElementById('wordsRead').value);
            const sessionDate = document.getElementById('sessionDate').value;
            
            if (!readingTime || !wordsRead) {
                showStatus('Please enter both reading time and words read', 'error');
                return;
            }

            const entry = {
                date: sessionDate || new Date().toISOString(),
                readingTime: readingTime,
                wordsRead: wordsRead,
                readingSpeed: Math.round(wordsRead / readingTime), // words per minute
                textType: document.getElementById('textType').value,
                newWords: parseInt(document.getElementById('newWords').value) || 0,
                lookups: parseInt(document.getElementById('lookups').value) || 0,
                notes: document.getElementById('notes').value
            };

            // Calculate improvement if there are previous entries
            if (progressData.length > 0) {
                const lastEntry = progressData[progressData.length - 1];
                entry.improvement = calculateImprovement(lastEntry.readingSpeed, entry.readingSpeed);
            }

            progressData.push(entry);
            localStorage.setItem('readingProgress', JSON.stringify(progressData));
            
            updateChart();
            updateStats();
            updateHistoryTable();
            clearForm();
            showStatus('Session saved successfully!', 'success');
			
			// Save to GitHub if configured
            if (localStorage.getItem('githubToken')) {
                saveToGithub(progressData);
            }
        }

        // Calculate improvement percentage
        function calculateImprovement(previousSpeed, currentSpeed) {
            return ((currentSpeed - previousSpeed) / previousSpeed * 100).toFixed(2);
        }
		
		// Update history table to show new metrics
function updateHistoryTable() {
    const tbody = document.getElementById('historyTableBody');
    tbody.innerHTML = '';
    
    progressData.forEach((entry, index) => {
        const tr = document.createElement('tr');
        const improvementClass = entry.improvement >= 1 ? 'text-green-600' : 'text-red-600';
        
        tr.innerHTML = 
            '<td class="px-4 py-2">' + new Date(entry.date).toLocaleString() + '</td>' +
            '<td class="px-4 py-2">' + entry.readingTime + '</td>' +
            '<td class="px-4 py-2">' + entry.wordsRead + '</td>' +
            '<td class="px-4 py-2">' + Math.round(entry.adjustedReadingSpeed || 0) + '</td>' +
            '<td class="px-4 py-2 ' + improvementClass + '">' +
                (entry.improvement ? entry.improvement + '%' : 'N/A') +
            '</td>' +
            '<td class="px-4 py-2">' +
                '<span class="text-sm text-gray-600">' +
                    'Comprehension: ' + (entry.comprehensionScore || 'N/A') + '%<br>' +
                    'Lookups: ' + (entry.lookups || 0) +
                '</span>' +
            '</td>' +
            '<td class="px-4 py-2">' +
                '<button onclick="editEntry(' + index + ')" class="text-blue-500">Edit</button>' +
                '<button onclick="deleteEntry(' + index + ')" class="text-red-500 ml-2">Delete</button>' +
            '</td>';
        
        tbody.appendChild(tr);
    });
}

        // Edit entry
        function editEntry(index) {
            const entry = progressData[index];
            document.getElementById('editIndex').value = index;
            document.getElementById('editDate').value = entry.date.slice(0, 16);
            document.getElementById('editTime').value = entry.readingTime;
            document.getElementById('editWords').value = entry.wordsRead;
            document.getElementById('editModal').style.display = 'block';
        }
		
	// Constants for standardized texts
const STANDARDIZED_TEXTS = {
    beginner: {
        text: "Hej! Jag heter Anna. Jag bor i Stockholm...", // Add your full standardized text here
        wordCount: 100,
        difficulty: 1
    },
    intermediate: {
        text: "Sverige är ett vackert land med många...", // Add your full standardized text here
        wordCount: 150,
        difficulty: 2
    },
    advanced: {
        text: "Den svenska ekonomin har under det senaste...", // Add your full standardized text here
        wordCount: 200,
        difficulty: 3
    }
};

// Enhanced progress tracking functions
function calculateAdjustedReadingSpeed(entry) {
    const baseSpeed = entry.wordsRead / entry.readingTime;
    const difficultyFactor = getDifficultyFactor(entry.textType);
    const comprehensionFactor = getComprehensionFactor(entry.comprehensionScore);
    const lookupPenalty = calculateLookupPenalty(entry.lookups, entry.wordsRead);
    
    return baseSpeed * difficultyFactor * comprehensionFactor * (1 - lookupPenalty);
}

function getDifficultyFactor(textType) {
    const difficultyFactors = {
        'news': 1.0,
        'story': 1.1,
        'book': 1.2,
        'social': 0.9,
        'website': 1.0,
        'standardized': 1.0
    };
    return difficultyFactors[textType] || 1.0;
}

function getComprehensionFactor(score) {
    if (!score) return 1.0;
    return 0.5 + (score / 200); // Scales from 0.5 to 1.0 based on comprehension
}

function calculateLookupPenalty(lookups, totalWords) {
    return Math.min(lookups / totalWords, 0.5); // Max 50% penalty for lookups
}

// Modify saveProgress to include new metrics
function saveProgress() {
    const readingTime = parseInt(document.getElementById('readingTime').value);
    const wordsRead = parseInt(document.getElementById('wordsRead').value);
    const sessionDate = document.getElementById('sessionDate').value;
    const comprehensionScore = parseInt(document.getElementById('comprehensionScore').value) || 0;
    
    if (!readingTime || !wordsRead) {
        showStatus('Please enter both reading time and words read', 'error');
        return;
    }

    const entry = {
        date: sessionDate || new Date().toISOString(),
        readingTime: readingTime,
        wordsRead: wordsRead,
        textType: document.getElementById('textType').value,
        comprehensionScore: comprehensionScore,
        newWords: parseInt(document.getElementById('newWords').value) || 0,
        lookups: parseInt(document.getElementById('lookups').value) || 0,
        notes: document.getElementById('notes').value
    };

    // Calculate adjusted reading speed
    entry.adjustedReadingSpeed = calculateAdjustedReadingSpeed(entry);

    // Calculate improvement using 7-day rolling average
    if (progressData.length > 0) {
        const recentEntries = progressData.slice(-7);
        const avgSpeed = recentEntries.reduce((sum, e) => sum + (e.adjustedReadingSpeed || 0), 0) / recentEntries.length;
        entry.improvement = ((entry.adjustedReadingSpeed - avgSpeed) / avgSpeed * 100).toFixed(2);
    }

    progressData.push(entry);
    localStorage.setItem('readingProgress', JSON.stringify(progressData));
    
    updateChart();
    updateStats();
    updateHistoryTable();
    clearForm();
    showStatus('Session saved successfully!', 'success');
}
    </script>
</body>
</html>