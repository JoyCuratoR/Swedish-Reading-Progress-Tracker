<!DOCTYPE html>
<html lang="en">
<!-- Previous head section and styles remain the same -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Reading Progress Tracker</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <!-- Previous styles remain the same -->
    <style>
         :root {
            --primary-color: #6366f1;
            --primary-hover: #4f46e5;
            --secondary-color: #14b8a6;
            --danger-color: #ef4444;
            --edit-color: #f59e0b;
            --background: #f8fafc;
            --card-bg: #ffffff;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: system-ui, -apple-system, sans-serif;
        }

        body {
            background-color: var(--background);
            color: var(--text-primary);
            line-height: 1.5;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: var(--card-bg);
            border-radius: 1rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            padding: 2rem;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
        }

        .card:hover {
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }

        h1, h2, h3 {
            color: var(--text-primary);
            margin-bottom: 1.5rem;
        }

        .input-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        label {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-secondary);
        }

        input {
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            font-size: 1rem;
            transition: all 0.2s ease;
            outline: none;
        }

        input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .button-group {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.875rem;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-hover);
        }

        .btn-secondary {
            background-color: var(--secondary-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-edit {
            background-color: var(--edit-color);
            color: white;
        }

        .tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            padding: 0.25rem;
            background-color: var(--background);
            border-radius: 0.75rem;
            width: fit-content;
        }

        .tab {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            background: transparent;
            color: var(--text-secondary);
            transition: all 0.2s ease;
        }

        .tab.active {
            background: var(--card-bg);
            color: var(--primary-color);
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 2rem;
            padding: 1rem;
            background: var(--card-bg);
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        }

        .data-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 1.5rem;
        }

        .data-table th,
        .data-table td {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
            text-align: left;
        }

        .data-table th {
            background-color: var(--background);
            font-weight: 500;
            color: var(--text-secondary);
        }

        .data-table tr:last-child td {
            border-bottom: none;
        }

        .data-table tbody tr:hover {
            background-color: var(--background);
        }

        .github-settings {
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: var(--background);
            border-radius: 0.75rem;
            border: 1px solid var(--border-color);
        }

        .alert {
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            display: none;
        }

        .alert-success {
            background-color: #dcfce7;
            color: #166534;
            border: 1px solid #86efac;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }

        @media (max-width: 768px) {
            .button-group {
                flex-direction: column;
            }
            
            .button-group button {
                width: 100%;
            }
            
            .tabs {
                width: 100%;
                justify-content: center;
            }
        }
		
		.auto-calculated {
            background-color: #f1f5f9;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="card">
        <h1>Swedish Reading Progress Tracker</h1>

        <!-- GitHub Settings Section -->
        <div class="github-settings">
            <h3>Data Storage Settings</h3>
            <div class="input-group">
                <label for="github-token">GitHub Personal Access Token</label>
                <input type="password" id="github-token" placeholder="Enter your GitHub token">
            </div>
            <div class="input-group">
                <label for="github-repo">Repository (username/repo)</label>
                <input type="text" id="github-repo" placeholder="e.g., username/swedish-progress">
            </div>
            <button class="btn-secondary" onclick="saveGitHubSettings()">Save Settings</button>
        </div>

        <!-- Alert Messages -->
        <div class="alert alert-success" id="success-alert"></div>
        <div class="alert alert-error" id="error-alert"></div>
        
        <!-- Input Section -->
        <div class="input-section">
            <div class="input-group">
                <label for="comprehension">Comprehension Rate (%)</label>
                <input type="number" id="comprehension" placeholder="Comprehension percentage" oninput="calculateERR()">
            </div>
            <div class="input-group">
                <label for="wpm">Reading Speed (WPM)</label>
                <input type="number" id="wpm" placeholder="Words per minute" oninput="calculateERR()">
            </div>
            <div class="input-group">
                <label for="err">Effective Reading Rate (ERR)</label>
                <input type="number" id="err" placeholder="Auto-calculated" class="auto-calculated" disabled>
            </div>
            <div class="input-group">
                <label for="complexity">Text Complexity (1-10)</label>
                <input type="number" id="complexity" step="0.1" placeholder="Complexity level">
            </div>
            <div class="input-group">
                <label for="date">Date</label>
                <input type="date" id="date">
            </div>
        </div>
        
        <div class="button-group">
            <button class="btn-primary" onclick="addDataPoint()">Add Data Point</button>
            <button class="btn-secondary" onclick="exportData()">Export Data (CSV)</button>
            <button class="btn-secondary" onclick="importData()">Import Data</button>
            <input type="file" id="fileInput" style="display: none" accept=".csv" onchange="handleFileSelect(event)">
        </div>

        <div class="tabs">
            <button class="tab active" onclick="switchTab('overall')">Overall Progress</button>
            <button class="tab" onclick="switchTab('metrics')">Detailed Metrics</button>
        </div>

        <div class="chart-container">
            <canvas id="progressChart"></canvas>
        </div>

        <div class="data-table-container">
            <h3>Data Points</h3>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Comprehension</th>
                        <th>Reading Speed</th>
                        <th>Complexity</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="dataTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Initialize data and chart variables
        let progressData = {
            dates: [],
            comprehension: [],
            wpm: [],
            complexity: [],
            err: []
        };
        let currentChart = null;
        let currentView = 'overall';
        let editingIndex = -1;

        // Modified window.onload function
        window.onload = async function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
            
             // Load GitHub settings if they exist
            const token = localStorage.getItem('github-token');
            const repo = localStorage.getItem('github-repo');
            if (token && repo) {
                document.getElementById('github-token').value = token;
                document.getElementById('github-repo').value = repo;
                try {
                    showAlert('Loading data from GitHub...', 'success');
                    await loadFromGitHub();
                    showAlert('Data loaded successfully!', 'success');
                } catch (error) {
                    showAlert('Error loading data: ' + error.message, 'error');
                }
            }
            
            initChart();
        };

        // Alert handling
        function showAlert(message, type) {
            const successAlert = document.getElementById('success-alert');
            const errorAlert = document.getElementById('error-alert');
            
            if (type === 'success') {
                successAlert.textContent = message;
                successAlert.style.display = 'block';
                setTimeout(() => successAlert.style.display = 'none', 3000);
            } else {
                errorAlert.textContent = message;
                errorAlert.style.display = 'block';
                setTimeout(() => errorAlert.style.display = 'none', 3000);
            }
        }

        // GitHub Integration
        async function saveGitHubSettings() {
            const token = document.getElementById('github-token').value;
            const repo = document.getElementById('github-repo').value;
            
            if (!token || !repo) {
                showAlert('Please enter both GitHub token and repository details', 'error');
                return;
            }

            localStorage.setItem('github-token', token);
            localStorage.setItem('github-repo', repo);
            
            try {
                await saveToGitHub();
                showAlert('Settings saved and data synced successfully!', 'success');
            } catch (error) {
                showAlert('Error saving to GitHub: ' + error.message, 'error');
            }
        }

        // Modified saveToGitHub function with better error handling
        async function saveToGitHub() {
            const token = localStorage.getItem('github-token');
            const repo = localStorage.getItem('github-repo');
            
            if (!token || !repo) {
                throw new Error('GitHub settings not configured');
            }

            const content = btoa(JSON.stringify(progressData, null, 2));
            const apiUrl = `https://api.github.com/repos/${repo}/contents/reading_progress.json`;

            try {
                // First try to get the file
                const response = await fetch(apiUrl, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                let updateResponse;
                if (response.status === 200) {
                    // Update existing file
                    const data = await response.json();
                    updateResponse = await fetch(apiUrl, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `token ${token}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: 'Update reading progress data',
                            content: content,
                            sha: data.sha
                        })
                    });
                } else if (response.status === 404) {
                    // Create new file
                    updateResponse = await fetch(apiUrl, {
                        method: 'PUT',
                        headers: {
                            'Authorization': `token ${token}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: 'Create reading progress data',
                            content: content
                        })
                    });
                } else {
                    throw new Error(`GitHub API returned status ${response.status}`);
                }

                if (!updateResponse.ok) {
                    const errorData = await updateResponse.json();
                    throw new Error(errorData.message || 'Failed to save to GitHub');
                }
            } catch (error) {
                throw new Error('Failed to save to GitHub: ' + error.message);
            }
        }

        async function loadFromGitHub() {
            const token = localStorage.getItem('github-token');
            const repo = localStorage.getItem('github-repo');
            
            if (!token || !repo) return;

            const apiUrl = `https://api.github.com/repos/${repo}/contents/reading_progress.json`;
            
            try {
                const response = await fetch(apiUrl, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (response.status === 200) {
                    const data = await response.json();
                    const content = JSON.parse(atob(data.content));
                    progressData = content;
                    updateChart();
                    updateDataTable();
                }
            } catch (error) {
                throw new Error('Failed to load from GitHub: ' + error.message);
            }
        }

        // Chart handling
        function initChart() {
            const ctx = document.getElementById('progressChart');
            if (currentChart) {
                currentChart.destroy();
            }
            
            currentChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Comprehension Rate (%)',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            updateChart();
        }

        // Modified updateChart function
        function updateChart() {
            if (!currentChart) return;

            const indices = progressData.dates
                .map((date, index) => ({ date, index }))
                .sort((a, b) => new Date(a.date) - new Date(b.date))
                .map(item => item.index);

            const sortedDates = indices.map(i => progressData.dates[i]);
            const sortedComprehension = indices.map(i => progressData.comprehension[i]);
            const sortedWPM = indices.map(i => progressData.wpm[i]);
            const sortedComplexity = indices.map(i => progressData.complexity[i]);
            const sortedERR = indices.map(i => progressData.err[i]);

            currentChart.data.labels = sortedDates;
            
            const commonOptions = {
                tension: 0.1,
                pointRadius: 6,
                pointHoverRadius: 8,
                pointBackgroundColor: 'white',
                pointBorderWidth: 2,
            };
            
            if (currentView === 'overall') {
                currentChart.data.datasets = [{
                    label: 'Effective Reading Rate (ERR)',
                    data: sortedERR,
                    borderColor: 'rgb(147, 51, 234)',
                    ...commonOptions
                }];
            } else {
                currentChart.data.datasets = [
                    {
                        label: 'Effective Reading Rate (ERR)',
                        data: sortedERR,
                        borderColor: 'rgb(147, 51, 234)',
                        ...commonOptions
                    },
                    {
                        label: 'Comprehension Rate (%)',
                        data: sortedComprehension,
                        borderColor: 'rgb(75, 192, 192)',
                        ...commonOptions
                    },
                    {
                        label: 'Reading Speed (WPM)',
                        data: sortedWPM,
                        borderColor: 'rgb(255, 99, 132)',
                        ...commonOptions
                    },
                    {
                        label: 'Text Complexity',
                        data: sortedComplexity,
                        borderColor: 'rgb(255, 205, 86)',
                        ...commonOptions
                    }
                ];
            }
            
            currentChart.update();
        }
		
		// Modified updateDataTable function
        function updateDataTable() {
            const tableBody = document.getElementById('dataTableBody');
            tableBody.innerHTML = '';
            
            const indices = progressData.dates
                .map((date, index) => ({ date, index }))
                .sort((a, b) => new Date(b.date) - new Date(a.date))
                .map(item => item.index);
            
            indices.forEach(function(i) {
                const row = document.createElement('tr');
                row.innerHTML = 
                    '<td>' + progressData.dates[i] + '</td>' +
                    '<td>' + progressData.comprehension[i] + '%</td>' +
                    '<td>' + progressData.wpm[i] + '</td>' +
                    '<td>' + progressData.err[i] + '</td>' +
                    '<td>' + progressData.complexity[i] + '</td>' +
                    '<td>' +
                        '<button class="btn-edit" onclick="editDataPoint(' + i + ')">Edit</button> ' +
                        '<button class="btn-danger" onclick="deleteDataPoint(' + i + ')">Delete</button>' +
                    '</td>';
                tableBody.appendChild(row);
            });
        }
		
        // Data point handling
        function addDataPoint() {
            const date = document.getElementById('date').value;
            const comprehension = parseFloat(document.getElementById('comprehension').value);
            const wpm = parseInt(document.getElementById('wpm').value);
            const complexity = parseFloat(document.getElementById('complexity').value);

            // Validation
            if (!date || isNaN(comprehension) || isNaN(wpm) || isNaN(complexity)) {
                showAlert('Please fill in all fields with valid numbers', 'error');
                return;
            }

            if (comprehension > 100) {
                showAlert('Comprehension rate cannot exceed 100%', 'error');
                return;
            }

            if (complexity > 10) {
                showAlert('Text complexity cannot exceed 10', 'error');
                return;
            }

            if (wpm < 0 || comprehension < 0 || complexity < 0) {
                showAlert('Values cannot be negative', 'error');
                return;
            }

            if (editingIndex >= 0) {
                progressData.dates[editingIndex] = date;
                progressData.comprehension[editingIndex] = comprehension;
                progressData.wpm[editingIndex] = wpm;
                progressData.complexity[editingIndex] = complexity;
                editingIndex = -1;
                document.querySelector('.btn-primary').textContent = 'Add Data Point';
            } else {
                progressData.dates.push(date);
                progressData.comprehension.push(comprehension);
                progressData.wpm.push(wpm);
                progressData.complexity.push(complexity);
            }

            updateChart();
            updateDataTable();
            clearInputs();
            saveToGitHub().catch(error => showAlert(error.message, 'error'));
        }

        function clearInputs() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date').value = today;
            document.getElementById('comprehension').value = '';
            document.getElementById('wpm').value = '';
            document.getElementById('complexity').value = '';
        }


        function switchTab(tab) {
            currentView = tab;
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            event.target.classList.add('active');
            updateChart();
        }

        // Modified editDataPoint function
        function editDataPoint(index) {
            editingIndex = index;
            document.getElementById('date').value = progressData.dates[index];
            document.getElementById('comprehension').value = progressData.comprehension[index];
            document.getElementById('wpm').value = progressData.wpm[index];
            document.getElementById('complexity').value = progressData.complexity[index];
            calculateERR(); // Recalculate ERR when loading data for editing
            document.querySelector('.btn-primary').textContent = 'Update Data Point';
            document.querySelector('.input-section').scrollIntoView({ behavior: 'smooth' });
        }
		
		// Add function to calculate ERR
        function calculateERR() {
            const comprehension = parseFloat(document.getElementById('comprehension').value) || 0;
            const wpm = parseInt(document.getElementById('wpm').value) || 0;
            const err = Math.round((wpm * comprehension) / 100);
            document.getElementById('err').value = err;
            return err;
        }

        // Modified addDataPoint function to handle updates
        async function addDataPoint() {
            const date = document.getElementById('date').value;
            const comprehension = parseFloat(document.getElementById('comprehension').value);
            const wpm = parseInt(document.getElementById('wpm').value);
            const complexity = parseFloat(document.getElementById('complexity').value);
            const err = calculateERR();

            // Validation
            if (!date || isNaN(comprehension) || isNaN(wpm) || isNaN(complexity)) {
                showAlert('Please fill in all fields with valid numbers', 'error');
                return;
            }

            if (comprehension > 100) {
                showAlert('Comprehension rate cannot exceed 100%', 'error');
                return;
            }

            if (complexity > 10) {
                showAlert('Text complexity cannot exceed 10', 'error');
                return;
            }

            if (wpm < 0 || comprehension < 0 || complexity < 0) {
                showAlert('Values cannot be negative', 'error');
                return;
            }

            try {
                if (editingIndex >= 0) {
                    progressData.dates[editingIndex] = date;
                    progressData.comprehension[editingIndex] = comprehension;
                    progressData.wpm[editingIndex] = wpm;
                    progressData.complexity[editingIndex] = complexity;
                    progressData.err[editingIndex] = err;
                    editingIndex = -1;
                    document.querySelector('.btn-primary').textContent = 'Add Data Point';
                    showAlert('Data point updated successfully!', 'success');
                } else {
                    progressData.dates.push(date);
                    progressData.comprehension.push(comprehension);
                    progressData.wpm.push(wpm);
                    progressData.complexity.push(complexity);
                    progressData.err.push(err);
                    showAlert('New data point added successfully!', 'success');
                }

                await saveToGitHub();
                updateChart();
                updateDataTable();
                clearInputs();
            } catch (error) {
                showAlert('Error saving data: ' + error.message, 'error');
            }
        }

        function deleteDataPoint(index) {
            if (confirm('Are you sure you want to delete this data point?')) {
                progressData.dates.splice(index, 1);
                progressData.comprehension.splice(index, 1);
                progressData.wpm.splice(index, 1);
                progressData.complexity.splice(index, 1);
                updateChart();
                updateDataTable();
            }
        }

        function exportData() {
            let csv = 'Date,Comprehension,WPM,Complexity\n';
            for (let i = 0; i < progressData.dates.length; i++) {
                csv += `${progressData.dates[i]},${progressData.comprehension[i]},${progressData.wpm[i]},${progressData.complexity[i]}\n`;
            }
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', 'swedish_reading_progress.csv');
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function importData() {
            document.getElementById('fileInput').click();
        }

        function handleFileSelect(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const text = e.target.result;
                const lines = text.split('\n');
                
                // Clear existing data
                progressData = {
                    dates: [],
                    comprehension: [],
                    wpm: [],
                    complexity: []
                };
                
                // Skip header row
                for (let i = 1; i < lines.length; i++) {
                    if (lines[i].trim() === '') continue;
                    
                    const [date, comprehension, wpm, complexity] = lines[i].split(',');
                    progressData.dates.push(date);
                    progressData.comprehension.push(parseFloat(comprehension));
                    progressData.wpm.push(parseInt(wpm));
                    progressData.complexity.push(parseFloat(complexity));
                }
                
                updateChart();
                updateDataTable();
            };
            
            reader.readAsText(file);
        }
		
    </script>
</body>
</html>
