<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Progress Tracker</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        .alert {
            position: fixed;
            top: 1rem;
            right: 1rem;
            padding: 1rem;
            border-radius: 0.5rem;
            z-index: 50;
            display: none;
        }
        .alert-success {
            background-color: #DEF7EC;
            color: #03543F;
        }
        .alert-error {
            background-color: #FDE8E8;
            color: #9B1C1C;
        }
		

    .progress-bar {
        width: 100%;
        background-color: #e0e0e0;
        padding: 3px;
        border-radius: 3px;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, .2);
    }

    .progress-bar-fill {
        display: block;
        height: 22px;
        background-color: #659cef;
        border-radius: 3px;
        transition: width 500ms ease-in-out;
    }

    </style>
</head>
<body class="bg-gray-100">
    <!-- Alert Components -->
    <div id="success-alert" class="alert alert-success"></div>
    <div id="error-alert" class="alert alert-error"></div>

    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-8">Swedish Progress Tracker</h1>
        
        <!-- GitHub Configuration Modal -->
        <div id="configModal" class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">GitHub Configuration</h2>
            <form id="configForm" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">GitHub Repository (format: username/repo)</label>
                    <input type="text" id="github-repo" placeholder="username/repo" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">GitHub Token</label>
                    <input type="password" id="github-token" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                    <p class="mt-1 text-sm text-gray-500">Your token will be stored securely in your browser's local storage.</p>
                </div>
                <button type="submit" class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                    Save Configuration
                </button>
            </form>
        </div>

        <!-- Rest of your existing HTML remains the same -->
		
		<!-- Added Data Management Section -->
        <div id="progressSection" class="hidden">
            <div class="bg-white rounded-lg shadow-md p-6 mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-semibold text-gray-800">Saved Progress Data</h2>
                    <div>
                        <button id="refreshDataBtn" class="text-sm text-green-600 hover:text-green-800 mr-4">
                            Refresh Data
                        </button>
                        <button id="reconfigureBtn" class="text-sm text-indigo-600 hover:text-indigo-800">
                            Reconfigure GitHub
                        </button>
                    </div>
                </div>
                
                <!-- Saved Data Table -->
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">WPM</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">CEFR</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="savedDataTable" class="bg-white divide-y divide-gray-200">
                            <!-- Data rows will be inserted here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Previous progress form and chart sections remain the same -->
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900">Edit Progress Data</h3>
                <form id="editForm" class="mt-4">
                    <input type="hidden" id="editFilePath">
                    <div class="mt-2 space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Initial WPM</label>
                            <input type="number" id="editWpm" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">CEFR Level</label>
                            <select id="editCefr" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                                <option value="1">A1</option>
                                <option value="0.85">A2</option>
                                <option value="0.7">B1</option>
                                <option value="0.55">B2</option>
                                <option value="0.4">C1</option>
                                <option value="0.25">C2</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-4 flex justify-end space-x-3">
                        <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
        
        <!-- Input Form -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <form id="progressForm" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Initial WPM</label>
                        <input type="number" id="initialWpm" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">CEFR Level</label>
                        <select id="cefrLevel" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                            <option value="1">A1</option>
                            <option value="0.85">A2</option>
                            <option value="0.7">B1</option>
                            <option value="0.55">B2</option>
                            <option value="0.4">C1</option>
                            <option value="0.25">C2</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Word Recognition (%)</label>
                        <input type="number" id="wordRecognition" min="0" max="100" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Context Inference (%)</label>
                        <input type="number" id="contextInference" min="0" max="100" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                    </div>
                </div>
                <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                    Calculate Progress
                </button>
            </form>
        </div>

        <!-- Results Display -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Progress Chart</h2>
            <canvas id="progressChart"></canvas>
        </div>
    </div>
    <script>
        // Alert handling
        function showAlert(message, type) {
            const successAlert = document.getElementById('success-alert');
            const errorAlert = document.getElementById('error-alert');
            const alert = type === 'success' ? successAlert : errorAlert;
            
            alert.textContent = message;
            alert.style.display = 'block';
            
            setTimeout(() => {
                alert.style.display = 'none';
            }, 3000);
        }

        // GitHub Integration
        async function saveGitHubSettings(e) {
            e.preventDefault();
            const token = document.getElementById('github-token').value;
            const repo = document.getElementById('github-repo').value;
            
            if (!token || !repo) {
                showAlert('Please enter both GitHub token and repository details', 'error');
                return;
            }

            localStorage.setItem('github-token', token);
            localStorage.setItem('github-repo', repo);

            try {
                await loadFromGitHub(); // Test the connection
                showAlert('Settings saved and connected successfully!', 'success');
                checkConfiguration();
            } catch (error) {
                showAlert('Error connecting to GitHub: ' + error.message, 'error');
                localStorage.removeItem('github-token');
                localStorage.removeItem('github-repo');
            }
        }

        async function saveToGitHub(data) {
            const token = localStorage.getItem('github-token');
            const repo = localStorage.getItem('github-repo');
            
            if (!token || !repo) {
                throw new Error('GitHub settings not configured');
            }

            const timestamp = new Date().toISOString();
            const filename = `reading_progress_${timestamp}.json`;
            const apiUrl = `https://api.github.com/repos/${repo}/contents/progress-data/${filename}`;
            const content = btoa(JSON.stringify(data, null, 2));

            try {
                const response = await fetch(apiUrl, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${token}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: 'Update reading progress data',
                        content: content
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to save to GitHub');
                }

                showAlert('Progress saved successfully!', 'success');
                await loadSavedData(); // Refresh the data table
            } catch (error) {
                throw new Error('Failed to save to GitHub: ' + error.message);
            }
        }

        async function loadFromGitHub() {
            const token = localStorage.getItem('github-token');
            const repo = localStorage.getItem('github-repo');
            
            if (!token || !repo) return;

            const apiUrl = `https://api.github.com/repos/${repo}/contents/progress-data`;
            
            try {
                const response = await fetch(apiUrl, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                if (!response.ok) {
                    if (response.status === 404) {
                        // Create the directory if it doesn't exist
                        await fetch(`https://api.github.com/repos/${repo}/contents/progress-data/.gitkeep`, {
                            method: 'PUT',
                            headers: {
                                'Authorization': `token ${token}`,
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                message: 'Initialize progress-data directory',
                                content: btoa('')
                            })
                        });
                        return [];
                    }
                    throw new Error(`GitHub API returned status ${response.status}`);
                }

                const files = await response.json();
                return files;
            } catch (error) {
                throw new Error('Failed to load from GitHub: ' + error.message);
            }
        }

        // Check configuration on page load
        async function checkConfiguration() {
            const token = localStorage.getItem('github-token');
            const repo = localStorage.getItem('github-repo');

            if (token && repo) {
                try {
                    await loadFromGitHub();
                    document.getElementById('configModal').classList.add('hidden');
                    document.getElementById('progressSection').classList.remove('hidden');
                    return true;
                } catch (error) {
                    showAlert('GitHub configuration error: ' + error.message, 'error');
                    localStorage.removeItem('github-token');
                    localStorage.removeItem('github-repo');
                }
            }
            
            document.getElementById('configModal').classList.remove('hidden');
            document.getElementById('progressSection').classList.add('hidden');
            return false;
        }

        // Event Listeners
        document.getElementById('configForm').addEventListener('submit', saveGitHubSettings);
		document.getElementById('refreshDataBtn').addEventListener('click', loadSavedData);
        document.getElementById('reconfigureBtn').addEventListener('click', () => {
            localStorage.removeItem('github-token');
            localStorage.removeItem('github-repo');
            checkConfiguration();
        });
		
        // Add this to your existing initialization code
        checkConfiguration();
        loadSavedData();

        // Your existing code for progress tracking and visualization remains the same

    let progressChart = null;

    document.getElementById('progressForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const initialWpm = parseFloat(document.getElementById('initialWpm').value);
        const cefrMultiplier = parseFloat(document.getElementById('cefrLevel').value);
        const wordRecognition = parseFloat(document.getElementById('wordRecognition').value) / 100;
        const contextInference = parseFloat(document.getElementById('contextInference').value) / 100;
        
        // Calculate comprehension score
        const comprehensionScore = (wordRecognition * 0.7) + (contextInference * 0.3);
        
        // Generate 30 days of data
        const data = generateProgressData(initialWpm, cefrMultiplier, comprehensionScore);
        
        // Update chart
        updateChart(data);
    });

    function generateProgressData(initialWpm, cefrMultiplier, comprehensionScore) {
        const days = 30;
        const data = {
            labels: [],
            expectedWpm: [],
            adjustedWpm: []
        };

        for (let day = 0; day <= days; day++) {
            data.labels.push(`Day ${day}`);
            
            // Calculate base WPM with 1% daily improvement
            const baseWpm = initialWpm * Math.pow(1.01, day);
            
            // Apply CEFR and comprehension adjustments
            const adjustedWpm = baseWpm * cefrMultiplier * comprehensionScore;
            
            data.expectedWpm.push(Math.round(baseWpm));
            data.adjustedWpm.push(Math.round(adjustedWpm));
        }

        return data;
    }

    function updateChart(data) {
        const ctx = document.getElementById('progressChart').getContext('2d');
        
        if (progressChart) {
            progressChart.destroy();
        }

        progressChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: data.labels,
                datasets: [
                    {
                        label: 'Expected WPM',
                        data: data.expectedWpm,
                        borderColor: 'rgb(99, 102, 241)',
                        tension: 0.1
                    },
                    {
                        label: 'Adjusted WPM (with CEFR & Comprehension)',
                        data: data.adjustedWpm,
                        borderColor: 'rgb(239, 68, 68)',
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Swedish Reading Progress'
                    }
                }
            }
        });
    }
	
	// Add these new functions for data management
        async function loadSavedData() {
            try {
                const username = storage.get('githubUsername');
                const repo = storage.get('repoName');
                const token = storage.get('githubToken');

                const response = await fetch(`https://api.github.com/repos/${username}/${repo}/contents/progress-data`, {
                    headers: {
                        'Authorization': `token ${token}`,
                    }
                });

                if (!response.ok) throw new Error('Failed to fetch data');

                const files = await response.json();
                const tableBody = document.getElementById('savedDataTable');
                tableBody.innerHTML = '';

                for (const file of files) {
                    const content = await fetch(file.download_url).then(res => res.json());
                    const row = createDataRow(file.path, content);
                    tableBody.appendChild(row);
                }
            } catch (error) {
                console.error('Error loading data:', error);
                alert('Failed to load saved data');
            }
        }

        function createDataRow(filePath, data) {
    const row = document.createElement('tr');
    const date = filePath.split('/')[1].split('.')[0];
    
    row.innerHTML = 
        '<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">' +
            new Date(date).toLocaleDateString() +
        '</td>' +
        '<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">' +
            data.expectedWpm[0] +
        '</td>' +
        '<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">' +
            getCefrLabel(data.cefrLevel) +
        '</td>' +
        '<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">' +
            '<button onclick="editData(\'' + filePath + '\')" class="text-indigo-600 hover:text-indigo-900 mr-4">' +
                'Edit' +
            '</button>' +
            '<button onclick="deleteData(\'' + filePath + '\')" class="text-red-600 hover:text-red-900">' +
                'Delete' +
            '</button>' +
        '</td>';
    
    return row;
}

        function getCefrLabel(value) {
            const cefrMap = {
                '1': 'A1',
                '0.85': 'A2',
                '0.7': 'B1',
                '0.55': 'B2',
                '0.4': 'C1',
                '0.25': 'C2'
            };
            return cefrMap[value] || value;
        }
		
		 async function deleteData(filePath) {
            if (!confirm('Are you sure you want to delete this entry?')) return;

            try {
                const username = storage.get('githubUsername');
                const repo = storage.get('repoName');
                const token = storage.get('githubToken');

                // Get the file's SHA
                const fileResponse = await fetch(`https://api.github.com/repos/${username}/${repo}/contents/${filePath}`, {
                    headers: {
                        'Authorization': `token ${token}`,
                    }
                });
                const fileData = await fileResponse.json();

                // Delete the file
                const response = await fetch(`https://api.github.com/repos/${username}/${repo}/contents/${filePath}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `token ${token}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: 'Delete progress data',
                        sha: fileData.sha
                    })
                });
				
				if (!response.ok) throw new Error('Failed to delete data');

                await loadSavedData();
                alert('Data deleted successfully');
            } catch (error) {
                console.error('Error deleting data:', error);
                alert('Failed to delete data');
            }
        }

        let currentEditPath = null;

        function editData(filePath) {
            currentEditPath = filePath;
            document.getElementById('editModal').classList.remove('hidden');
            // Load current data into form
            // You would need to fetch the current data and populate the form
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
            currentEditPath = null;
        }


    </script>
</body>
</html>