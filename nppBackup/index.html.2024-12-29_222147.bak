<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Reading Progress Tracker</title>
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #475569;
            --background: #f8fafc;
            --card: #ffffff;
            --border: #e2e8f0;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: system-ui, -apple-system, sans-serif;
        }

        body {
            background: var(--background);
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            background: var(--card);
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            padding: 1.5rem;
            margin-bottom: 1rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--secondary);
            font-weight: 500;
        }

        input, select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border);
            border-radius: 0.25rem;
            font-size: 1rem;
        }

        button {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            font-weight: 500;
        }

        button:hover {
            opacity: 0.9;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th,
        .data-table td {
            padding: 0.75rem;
            border-bottom: 1px solid var(--border);
            text-align: left;
        }

        .data-table th {
            background: var(--background);
            font-weight: 500;
        }

        .actions {
            display: flex;
            gap: 0.5rem;
        }

        .delete-btn {
            background: #ef4444;
        }

        .edit-btn {
            background: #10b981;
        }

        #chart {
            width: 100%;
            height: 400px;
            margin-top: 1rem;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <div class="card">
            <h2>Add Reading Progress</h2>
            <form id="progressForm">
                <div class="form-group">
                    <label for="date">Date</label>
                    <input type="date" id="date" required>
                </div>
                <div class="form-group">
                    <label for="wpm">Words Per Minute</label>
                    <input type="number" id="wpm" required>
                </div>
                <div class="form-group">
                    <label for="level">CEFR Level</label>
                    <select id="level" required>
                        <option value="A1">A1</option>
                        <option value="A2">A2</option>
                        <option value="B1">B1</option>
                        <option value="B2">B2</option>
                        <option value="C1">C1</option>
                        <option value="C2">C2</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="wordRecognition">Word Recognition Accuracy (%)</label>
                    <input type="number" id="wordRecognition" min="0" max="100" required>
                </div>
                <div class="form-group">
                    <label for="contextInference">Context Inference Accuracy (%)</label>
                    <input type="number" id="contextInference" min="0" max="100" required>
                </div>
                <button type="submit">Save Progress</button>
            </form>
        </div>

        <div class="card">
            <h2>Progress Chart</h2>
            <canvas id="chart"></canvas>
        </div>

        <div class="card">
            <h2>Progress History</h2>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>WPM</th>
                        <th>Level</th>
                        <th>Word Recognition</th>
                        <th>Context Inference</th>
                        <th>Total Score</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="progressTable"></tbody>
            </table>
        </div>
    </div>

    <script>
        // Configuration and Constants
        const COMPLEXITY_MULTIPLIERS = {
            'A1': 1.0,
            'A2': 0.85,
            'B1': 0.7,
            'B2': 0.55,
            'C1': 0.4,
            'C2': 0.25
        };

        const WORD_RECOGNITION_WEIGHT = 0.7;
        const CONTEXT_INFERENCE_WEIGHT = 0.3;

        // GitHub API Configuration
        const GITHUB_API = 'https://api.github.com';
        const REPO_OWNER = ''; // Add your GitHub username
        const REPO_NAME = ''; // Add your repository name
        const DATA_PATH = 'data/progress.json';

        // Initialize Chart
        const ctx = document.getElementById('chart').getContext('2d');
        const progressChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Total Reading Score',
                    data: [],
                    borderColor: '#2563eb',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Calculate Total Reading Proficiency
        function calculateTotalScore(wpm, level, wordRecognition, contextInference) {
            const complexityMultiplier = COMPLEXITY_MULTIPLIERS[level];
            const comprehensionScore = 
                (wordRecognition / 100 * WORD_RECOGNITION_WEIGHT) + 
                (contextInference / 100 * CONTEXT_INFERENCE_WEIGHT);
            
            return wpm * complexityMultiplier * comprehensionScore;
        }

        // GitHub API Functions
        async function getGitHubToken() {
            // Implement your secure token retrieval method here
            // This could be a server-side API call to a secure token service
            // NEVER store the token in client-side code or localStorage
            throw new Error('Token retrieval method not implemented');
        }

        async function saveToGitHub(data) {
            try {
                const token = await getGitHubToken();
                
                // Get the current file SHA (if it exists)
                const currentFile = await fetch(
                    `${GITHUB_API}/repos/${REPO_OWNER}/${REPO_NAME}/contents/${DATA_PATH}`,
                    {
                        headers: {
                            'Authorization': `token ${token}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    }
                ).then(res => res.json()).catch(() => null);

                // Prepare the API request
                const content = btoa(JSON.stringify(data, null, 2));
                const body = {
                    message: 'Update reading progress data',
                    content,
                    ...(currentFile && { sha: currentFile.sha })
                };

                // Save to GitHub
                await fetch(
                    `${GITHUB_API}/repos/${REPO_OWNER}/${REPO_NAME}/contents/${DATA_PATH}`,
                    {
                        method: 'PUT',
                        headers: {
                            'Authorization': `token ${token}`,
                            'Content-Type': 'application/json',
                            'Accept': 'application/vnd.github.v3+json'
                        },
                        body: JSON.stringify(body)
                    }
                );

                return true;
            } catch (error) {
                console.error('Error saving to GitHub:', error);
                return false;
            }
        }

        async function loadFromGitHub() {
            try {
                const token = await getGitHubToken();
                const response = await fetch(
                    `${GITHUB_API}/repos/${REPO_OWNER}/${REPO_NAME}/contents/${DATA_PATH}`,
                    {
                        headers: {
                            'Authorization': `token ${token}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    }
                );
                
                if (!response.ok) return [];
                
                const data = await response.json();
                return JSON.parse(atob(data.content));
            } catch (error) {
                console.error('Error loading from GitHub:', error);
                return [];
            }
        }

        // UI Functions
        function updateChart(data) {
            progressChart.data.labels = data.map(entry => entry.date);
            progressChart.data.datasets[0].data = data.map(entry => entry.totalScore);
            progressChart.update();
        }

        function updateTable(data) {
            const tbody = document.getElementById('progressTable');
            tbody.innerHTML = '';

            data.forEach((entry, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
					'<td>' + entry.date + '</td>' +
					'<td>' + entry.wpm + '</td>' +
					'<td>' + entry.level + '</td>' +
					'<td>' + entry.wordRecognition + '%</td>' +
					'<td>' + entry.contextInference + '%</td>' +
					'<td>' + entry.totalScore.toFixed(2) + '</td>' +
					'<td>' +
                    <td class="actions">
				'<button class="edit-btn" onclick="editEntry(' + index + ')">Edit</button> ' +
                '<button class="delete-btn" onclick="deleteEntry(' + index + ')">Delete</button>' +
            '</td>';
                tbody.appendChild(row);
            });
        }

        // Event Handlers
        document.getElementById('progressForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = {
                date: document.getElementById('date').value,
                wpm: parseInt(document.getElementById('wpm').value),
                level: document.getElementById('level').value,
                wordRecognition: parseInt(document.getElementById('wordRecognition').value),
                contextInference: parseInt(document.getElementById('contextInference').value)
            };

            formData.totalScore = calculateTotalScore(
                formData.wpm,
                formData.level,
                formData.wordRecognition,
                formData.contextInference
            );

            const currentData = await loadFromGitHub();
            currentData.push(formData);
            
            if (await saveToGitHub(currentData)) {
                updateChart(currentData);
                updateTable(currentData);
                e.target.reset();
            } else {
                alert('Error saving data. Please try again.');
            }
        });

        async function editEntry(index) {
            const data = await loadFromGitHub();
            const entry = data[index];
            
            // Populate form with entry data
            document.getElementById('date').value = entry.date;
            document.getElementById('wpm').value = entry.wpm;
            document.getElementById('level').value = entry.level;
            document.getElementById('wordRecognition').value = entry.wordRecognition;
            document.getElementById('contextInference').value = entry.contextInference;
            
            // Remove the entry and update
            data.splice(index, 1);
            await saveToGitHub(data);
            updateChart(data);
            updateTable(data);
        }

        async function deleteEntry(index) {
            if (!confirm('Are you sure you want to delete this entry?')) return;

            const data = await loadFromGitHub();
            data.splice(index, 1);
            
            if (await saveToGitHub(data)) {
                updateChart(data);
                updateTable(data);
            } else {
                alert('Error deleting entry. Please try again.');
            }
        }

        // Initial Load
        async function initialize() {
            const data = await loadFromGitHub();
            updateChart(data);
            updateTable(data);
        }

        initialize();
    </script>
</body>
</html>