<!DOCTYPE html>
<html lang="en">
<!-- Previous head section and styles remain exactly the same until the script section -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Language Learning Progress Tracker</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }

        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .input-group {
            margin-bottom: 20px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .input-field {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 5px;
            font-weight: 500;
        }

        input, select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        button {
            background: #0066cc;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        button:hover {
            background: #0052a3;
        }

        .action-buttons {
            margin: 20px 0;
            display: flex;
            gap: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #f5f5f5;
            font-weight: 600;
        }

        .chart-container {
            margin-top: 30px;
            height: 400px;
        }

        .delete-btn {
            background: #dc3545;
        }

        .delete-btn:hover {
            background: #c82333;
        }

        .goal-status {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border: 1px solid #dee2e6;
        }

        .goal-met {
            color: #28a745;
            font-weight: bold;
        }

        .goal-not-met {
            color: #dc3545;
            font-weight: bold;
        }

        .progress-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }

        .above-target {
            background-color: #28a745;
        }

        .below-target {
            background-color: #dc3545;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Language Learning Progress Tracker</h1>
        
        <div class="input-group">
            <div class="input-field">
                <label for="date">Date</label>
                <input type="date" id="date">
            </div>
            <div class="input-field">
                <label for="wpm">Words Per Minute</label>
                <input type="number" id="wpm" min="0">
            </div>
            <div class="input-field">
                <label for="level">CEFR Level</label>
                <select id="level">
                    <option value="1.0">A1</option>
                    <option value="0.85">A2</option>
                    <option value="0.7">B1</option>
                    <option value="0.55">B2</option>
                    <option value="0.4">C1</option>
                    <option value="0.25">C2</option>
                </select>
            </div>
            <div class="input-field">
                <label for="wordRecognition">Word Recognition (%)</label>
                <input type="number" id="wordRecognition" min="0" max="100">
            </div>
            <div class="input-field">
                <label for="contextInference">Context Inference (%)</label>
                <input type="number" id="contextInference" min="0" max="100">
            </div>
        </div>

        <div class="action-buttons">
            <button onclick="addEntry()">Add Entry</button>
            <button onclick="exportData()">Export Data</button>
            <input type="file" id="importFile" accept=".json" style="display: none" onchange="importData(event)">
            <button onclick="document.getElementById('importFile').click()">Import Data</button>
        </div>

        <div class="goal-status" id="goalStatus"></div>

        <table id="dataTable">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>WPM</th>
                    <th>Level</th>
                    <th>Word Recognition</th>
                    <th>Context Inference</th>
                    <th>Final Score</th>
                    <th>Target Score</th>
                    <th>Progress</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <div class="chart-container">
            <canvas id="progressChart"></canvas>
        </div>
    </div>

    <script>
        let entries = [];
        let chart = null;

        function calculateFinalScore(entry) {
            const comprehensionScore = (entry.wordRecognition / 100 * 0.7) + 
                                     (entry.contextInference / 100 * 0.3);
            return (entry.wpm * parseFloat(entry.level) * comprehensionScore).toFixed(2);
        }

        function calculateTargetScore(entry, index) {
            if (index === 0) return calculateFinalScore(entry);
            const firstEntry = entries[0];
            const firstScore = parseFloat(calculateFinalScore(firstEntry));
            const daysDiff = Math.floor((new Date(entry.date) - new Date(firstEntry.date)) / (1000 * 60 * 60 * 24));
            return (firstScore * Math.pow(1.01, daysDiff)).toFixed(2);
        }

        function addEntry() {
            const entry = {
                date: document.getElementById('date').value,
                wpm: parseInt(document.getElementById('wpm').value),
                level: document.getElementById('level').value,
                wordRecognition: parseInt(document.getElementById('wordRecognition').value),
                contextInference: parseInt(document.getElementById('contextInference').value)
            };

            if (!entry.date || !entry.wpm || !entry.wordRecognition || !entry.contextInference) {
                alert('Please fill in all fields');
                return;
            }

            entries.push(entry);
            updateTable();
            updateChart();
            updateGoalStatus();
            saveToLocalStorage();
        }

        function updateTable() {
            const tbody = document.querySelector('#dataTable tbody');
            tbody.innerHTML = '';

            entries.sort((a, b) => new Date(a.date) - new Date(b.date)).forEach((entry, index) => {
                const actualScore = calculateFinalScore(entry);
                const targetScore = calculateTargetScore(entry, index);
                const isAboveTarget = parseFloat(actualScore) >= parseFloat(targetScore);
                const progressClass = isAboveTarget ? 'above-target' : 'below-target';

                const row = tbody.insertRow();
                row.innerHTML = 
                    '<td>' + entry.date + '</td>' +
                    '<td>' + entry.wpm + '</td>' +
                    '<td>' + getLevelLabel(entry.level) + '</td>' +
                    '<td>' + entry.wordRecognition + '%</td>' +
                    '<td>' + entry.contextInference + '%</td>' +
                    '<td>' + actualScore + '</td>' +
                    '<td>' + targetScore + '</td>' +
                    '<td><span class="progress-indicator ' + progressClass + '"></span></td>' +
                    '<td><button class="delete-btn" onclick="deleteEntry(' + index + ')">Delete</button></td>';
            });
        }

        function updateGoalStatus() {
            if (entries.length < 2) return;

            const sortedEntries = entries.sort((a, b) => new Date(a.date) - new Date(b.date));
            const latestEntry = sortedEntries[sortedEntries.length - 1];
            const latestScore = parseFloat(calculateFinalScore(latestEntry));
            const latestTarget = parseFloat(calculateTargetScore(latestEntry, sortedEntries.length - 1));
            const percentDiff = ((latestScore - latestTarget) / latestTarget * 100).toFixed(1);
            
            const goalStatusDiv = document.getElementById('goalStatus');
            goalStatusDiv.innerHTML = 
                '<h3>Goal Progress</h3>' +
                '<p>Latest Score: ' + latestScore + '</p>' +
                '<p>Target Score: ' + latestTarget + '</p>' +
                '<p class="' + (latestScore >= latestTarget ? 'goal-met' : 'goal-not-met') + '">' +
                'You are ' + Math.abs(percentDiff) + '% ' + (latestScore >= latestTarget ? 'above' : 'below') + ' your target' +
                '</p>';
        }

        function updateChart() {
            const ctx = document.getElementById('progressChart').getContext('2d');
            
            if (chart) {
                chart.destroy();
            }

            const sortedEntries = entries.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: sortedEntries.map(function(e) { return e.date; }),
                    datasets: [{
                        label: 'Actual Score',
                        data: sortedEntries.map(function(e) { return calculateFinalScore(e); }),
                        borderColor: '#0066cc',
                        tension: 0.1,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    },
                    {
                        label: 'Target Score (1% Daily Growth)',
                        data: sortedEntries.map(function(e, i) { return calculateTargetScore(e, i); }),
                        borderColor: '#28a745',
                        borderDash: [5, 5],
                        tension: 0.1,
                        pointRadius: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function getLevelLabel(value) {
            const levels = {
                '1.0': 'A1',
                '0.85': 'A2',
                '0.7': 'B1',
                '0.55': 'B2',
                '0.4': 'C1',
                '0.25': 'C2'
            };
            return levels[value];
        }

        function deleteEntry(index) {
            entries.splice(index, 1);
            updateTable();
            updateChart();
            updateGoalStatus();
            saveToLocalStorage();
        }

        function exportData() {
            const dataStr = JSON.stringify(entries);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            const exportFileDefaultName = 'language_progress.json';

            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
        }

        function importData(event) {
            const file = event.target.files[0];
            const reader = new FileReader();

            reader.onload = function(e) {
                try {
                    entries = JSON.parse(e.target.result);
                    updateTable();
                    updateChart();
                    updateGoalStatus();
                    saveToLocalStorage();
                } catch (error) {
                    alert('Error importing file: Invalid format');
                }
            };

            reader.readAsText(file);
        }

        function saveToLocalStorage() {
            localStorage.setItem('languageProgress', JSON.stringify(entries));
        }

        function loadFromLocalStorage() {
            const saved = localStorage.getItem('languageProgress');
            if (saved) {
                entries = JSON.parse(saved);
                updateTable();
                updateChart();
                updateGoalStatus();
            }
        }

        // Set today's date as default
        document.getElementById('date').valueAsDate = new Date();
        
        // Load saved data on startup
        loadFromLocalStorage();
    </script>
</body>
</html>